// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Schemas
// =========================================

// Prisma Schema

// user schema
model User {
  id               String           @id @default(uuid())
  email            String           @unique
  membershipStatus MembershipStatus @default(FREE)
  emailVerified    Boolean          @default(false)
  createdAt        DateTime         @default(now())

  otpVerifications OtpVerification[]
  folders          Folder[]
  files            File[]
  sharedFiles      SharedFile[]
  trash            Trash[]
  tasks            Task[]

  @@index([email])
}

// otp verification schema
model OtpVerification {
  id        String   @id @default(uuid())
  email     String?
  userId    String
  otp       String
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([otp])
  @@index([userId])
  @@index([email])
}

model Folder {
  id        String   @id @default(uuid())
  userId    String
  name      String
  createdAt DateTime @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  files File[]
}

model File {
  id            String    @id @default(uuid())
  folderId      String?
  userId        String
  name          String
  type          String
  size          Int // Changed from String to Int for better sorting/filtering
  accessHash    String
  dcId          Int
  fileReference Bytes
  fileId        String
  messageId     String? // Crucial for reference refreshes
  duration      Int?
  thumbnail     String? // Consider changing to Bytes if storing binary thumbnails
  isStarred     Boolean   @default(false)
  isShared      Boolean   @default(false)
  deletedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt // Renamed from lastUpdatedAt for consistency
  expiresAt     DateTime? // New: For automatic cleanup

  // Relations
  folder     Folder?      @relation(fields: [folderId], references: [id], onDelete: SetNull)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  trash      Trash[]
  sharedFile SharedFile[]

  // Add indexes for performance
  @@index([userId])
  @@index([folderId])
  @@index([createdAt])
  @@index([expiresAt])
  @@index([isStarred])
  @@index([isShared])
}

model SharedFile {
  id              String   @id @default(uuid())
  fileId          String
  sharedWithEmail String
  sharedById      String
  createdAt       DateTime @default(now())
  file            File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  sharedBy        User     @relation(fields: [sharedById], references: [id], onDelete: Cascade)
}

model Trash {
  id                    String   @id @default(uuid())
  fileId                String
  userId                String
  deletedAt             DateTime @default(now())
  permanentDeletionDate DateTime

  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id              String     @id @default(uuid())
  userId          String
  assignedToEmail String
  title           String
  description     String
  status          TaskStatus
  createdAt       DateTime   @default(now())
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum MembershipStatus {
  FREE
  STUDENT
  PREMIUM
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}
