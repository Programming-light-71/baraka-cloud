// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Schemas
// =========================================

// Prisma Schema

// user schema
model User {
  id               String           @id @default(uuid())
  email            String           @unique
  membershipStatus MembershipStatus @default(FREE)
  emailVerified    Boolean          @default(false)
  createdAt        DateTime         @default(now())

  otpVerifications OtpVerification[]
  folders          Folder[]
  files            File[]
  sharedFiles      SharedFile[]
  trash            Trash[]
  tasks            Task[]
}

// otp verification schema
model OtpVerification {
  id        String   @id @default(uuid())
  email     String?
  userId    String
  otp       String
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Folder {
  id        String   @id @default(uuid())
  userId    String
  name      String
  createdAt DateTime @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  files File[]
}

model File {
  id        String    @id @default(uuid())
  folderId  String?
  userId    String
  name      String
  type      String
  size      Int?
  filePath  String
  duration  Int?
  thumbnail String?
  isStarred Boolean   @default(false)
  isShared  Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())

  folder     Folder?      @relation(fields: [folderId], references: [id], onDelete: SetNull)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  trash      Trash[]
  sharedFile SharedFile[]
}

model SharedFile {
  id              String   @id @default(uuid())
  fileId          String
  sharedWithEmail String
  sharedById      String
  createdAt       DateTime @default(now())
  file            File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  sharedBy        User     @relation(fields: [sharedById], references: [id], onDelete: Cascade)
}

model Trash {
  id                    String   @id @default(uuid())
  fileId                String
  userId                String
  deletedAt             DateTime @default(now())
  permanentDeletionDate DateTime

  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id              String     @id @default(uuid())
  userId          String
  assignedToEmail String
  title           String
  description     String
  status          TaskStatus
  createdAt       DateTime   @default(now())
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum MembershipStatus {
  FREE
  STUDENT
  PREMIUM
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}
